# ------------------------------instalando pnpm------------------------------
FROM node:20-alpine as base

# Instalando pnpm y configurando usuario no root
RUN npm i -g pnpm && \
    addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

WORKDIR /app

# ------------------------------instalando dependencias------------------------------
FROM base as dependencies

WORKDIR /app
COPY package*.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

# ------------------------------build stage------------------------------
FROM base as build

WORKDIR /app
COPY package*.json tsconfig*.json nest-cli.json .eslintrc.js ./
COPY src/ ./src/
COPY --from=dependencies /app/node_modules ./node_modules
RUN pnpm build
RUN pnpm prune --prod

# ------------------------------deploy stage------------------------------
FROM node:20-alpine as deploy

WORKDIR /app
# Copiamos los archivos de configuraci√≥n del usuario no root desde la etapa base
COPY --from=base /etc/passwd /etc/group /etc/
# Copiamos los archivos de la etapa build
COPY --chown=nestjs:nodejs --from=build /app/dist/ ./dist/
# COPY --from=build /app/public/ ./public/
COPY --chown=nestjs:nodejs --from=build /app/node_modules ./node_modules
COPY --chown=nestjs:nodejs --from=build /app/package.json ./
COPY --chown=nestjs:nodejs --from=build /app/tsconfig*.json ./
COPY --chown=nestjs:nodejs --from=build /app/nest-cli.json ./

# Cambio la propiedad de los archivos al usuario no root
# RUN chown -R nestjs:nodejs /app
# Cambio al usuario no root
USER nestjs

# Configuramos las variables de entorno
ENV NODE_ENV prod

EXPOSE 3000
CMD [ "node", "dist/main.js" ]